# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а
# указать явно, в программе.


list_1 = [234, 4.05, "lalala", None, [1, 2, 3], {1: "one", 2: "two"}, ("A", "B", "C", "D"), False]
for i in range(len(list_1)):
    print(type(list_1[i]))


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1,
# 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов
# необходимо использовать функцию input().


lst_1 = input('Enter your text: ').split()

for i in range(1, len(lst_1), 2):
    lst_1[i - 1], lst_1[i] = lst_1[i], lst_1[i -1]
print(lst_1)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц
# (зима, весна, лето, осень). Напишите решения через list и через dict.


lst_2 = [0, 'зима', 'зима', 'весна', 'весна', 'весна', 'лето', 'лето', 'лето', 'осень', 'осень', 'осень', 'зима']
dct_2 = {12: 'зима', 1: 'зима', 2: 'зима',
         3: 'весна', 4: 'весна', 5: 'весна',
         6: 'лето', 7: 'лето', 8: 'лето',
         9: 'осень', 10: 'осень', 11: 'осень'}

user_1 = int(input("Enter your number: "))

print(lst_2[user_1]) if 1 <= user_1 <= 12 else print("Error")

print(dct_2[user_1]) if 1 <= user_1 <= 12 else print("Error")


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.


lst_3 = input().split()
for i in range(len(lst_3)):
    print(f'{i + 1}. {lst_3[i][:10]}')


# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то
# новый элемент с тем же значением должен разместиться после них.


lst_4 = []
el_count = int(input("Enter the number of list items: "))
for i in range(el_count):
    lst_4.append(int(input("Enter item: ")))
print(sorted(lst_4))


# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя.

# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]

# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.

# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }


goods = int(input("Введите количество товаров: "))
dct_2 = []
lst_5 = []
m = 1
analys = {}
while m <= goods:
    dct_3 = dict({'название': input("введите название "), 'цена': input("Введите цену "),
                    'количество': input('Введите количество '), 'eд': input("Введите единицу измерения ")})
    lst_5.append((m, my_dict))
    m += 1
    analys  = dict(
        {'название': my_dict.get('название'), 'цена': my_dict.get('цена'), 'количество': my_dict.get('количество'),
         'ед': my_dict.get('ед')})
print(lst_5)
print(analys)

